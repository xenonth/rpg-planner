{"version":3,"sources":["components/Header.js","utils/API.js","components/inhabitantItem.js","components/randomBtn.js","components/randomCard.js","components/randomTown.js","pages/GeneratedTown.js","components/CardDB.js","components/ListAllEntries.js","pages/Home.js","components/SubmitBtn.js","components/CreateFormBasic.js","pages/SubmitIdea.js","App.js","reportWebVitals.js","index.js"],"names":["headersData","label","href","useStyles","makeStyles","header","paddingLeft","d20","color","menuButton","size","marginLeft","toolbar","display","justifyContent","drawerContainer","padding","Header","useState","mobileView","drawerOpen","state","setState","useEffect","setResponsiveness","window","innerWidth","prevState","addEventListener","getDrawerChoices","map","Link","component","RouterLink","to","style","textDecoration","key","MenuItem","getMenuButtons","Button","className","AppBar","position","Toolbar","IconButton","edge","onClick","Drawer","anchor","open","onClose","icon","faDiceD20","API","randomSettlement","axios","get","getSettlements","getSettlementId","id","deleteSettlement","delete","saveSettlement","postSettlement","post","InhabitantItem","props","races","console","log","removeBlanks","filter","race","undefined","listItems","toString","GenerateTown","Box","m","variant","root","minWidth","title","fontSize","fontWeight","textAlign","pos","marginBottom","body","background","footer","marginTop","RandomCard","name","government","type","description","happening","classes","Card","Typography","placeholder","CardContent","RandomTown","firstLetterCapital","string","charAt","toUpperCase","slice","renderSettlement","then","res","JSON","stringify","data","population","raceOne","raceTwo","raceThree","raceFour","whatsUp","whatIsGoingOn","catch","err","this","Component","theme","flexGrow","GeneratorPage","Grid","container","spacing","item","lg","xs","margin","CardDB","ListAllEntries","AllEntries","settlementOne","settlementTwo","settlementThree","settlementFour","settlementFive","town","majorityRace","otherInformation","Home","md","SubmitBtn","CreateForm","addToDB","numberOfRaces","parseInt","numberOfRacesValue","percentageOne","percentageOneValue","townValue","typeValue","populationValue","govern","governValue","descriptionValue","raceOneValue","majorityPercentage","otherValue","author","authorValue","alert","error","handleChange","bind","handleSubmit","event","target","value","preventDefault","autoComplete","htmlFor","onChange","required","cols","rows","min","max","sidePaper","palette","text","secondary","paperForm","SubmitIdea","Paper","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e196c81.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n//Material UI Dependencies\r\nimport { AppBar, Toolbar, makeStyles, Button, IconButton, \r\n  Drawer, Link, MenuItem,} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n//for React link navigation\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n//fontawesome-Icon\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDiceD20} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst headersData = [\r\n  {\r\n    label: \"Home\",\r\n    href: \"/home\",\r\n  },\r\n  {\r\n    label: \"random\",\r\n    href: \"/random\",\r\n  },\r\n  {\r\n    label: \"custom\",\r\n    href: \"/custom\",\r\n  },\r\n];\r\n\r\n//Materials UI layout\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n     \"@media (max-width: 900px)\": {\r\n      paddingLeft: 0,\r\n    },\r\n  },\r\n  d20: {\r\n    color: \"white\",\r\n  },\r\n  menuButton: {\r\n    size: \"18px\",\r\n    marginLeft: \"38px\",\r\n },\r\n toolbar: {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n},\r\ndrawerContainer: {\r\n  padding: \"20px 30px\",\r\n},\r\n}));\r\n\r\nfunction Header() {\r\n  \r\n  //css styles for header\r\n  const {header, d20, menuButton, toolbar, drawerContainer} = useStyles();\r\n  \r\n  const [state, setState] = useState({\r\n    mobileView: false,\r\n    drawerOpen: false,\r\n  })\r\n\r\nconst { mobileView, drawerOpen } = state;\r\n  //responsive material-ui via state\r\n\r\n  useEffect(() => {\r\n    const setResponsiveness = () => {\r\n      return window.innerWidth < 900\r\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n    };\r\n\r\n    setResponsiveness();\r\n\r\n    window.addEventListener(\"resize\", () => setResponsiveness());\r\n  }, []);\r\n\r\n\r\n    const displayDesktop = () => {\r\n      return <Toolbar className={toolbar}>\r\n        <FontAwesomeIcon className={d20} icon={faDiceD20} />  \r\n        <div>{getMenuButtons()}</div> \r\n      </Toolbar>;\r\n    };\r\n\r\n    const displayMobile = () => {\r\n      const handleDrawerOpen = () =>\r\n        setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n      const handleDrawerClose = () =>\r\n        setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n  \r\n      return (\r\n        <Toolbar>\r\n          <IconButton\r\n            {...{\r\n              edge: \"start\",\r\n              color: \"inherit\",\r\n              \"aria-label\": \"menu\",\r\n              \"aria-haspopup\": \"true\",\r\n              onClick: handleDrawerOpen,\r\n            }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n  \r\n          <Drawer\r\n            {...{\r\n              anchor: \"left\",\r\n              open: drawerOpen,\r\n              onClose: handleDrawerClose,\r\n            }}\r\n          >\r\n            <div className={drawerContainer}>{getDrawerChoices()}</div>\r\n          </Drawer>\r\n  \r\n          <div><FontAwesomeIcon className={d20} icon={faDiceD20} /> </div>\r\n        </Toolbar>\r\n      );\r\n    };\r\n    \r\n    const getDrawerChoices = () => {\r\n      return headersData.map(({ label, href }) => {\r\n        return (\r\n          <Link\r\n            {...{\r\n              component: RouterLink,\r\n              to: href,\r\n              color: \"inherit\",\r\n              style: { textDecoration: \"none\" },\r\n              key: label,\r\n            }}\r\n          >\r\n            <MenuItem>{label}</MenuItem>\r\n          </Link>\r\n        );\r\n      });\r\n    };\r\n\r\n    const getMenuButtons = () => {\r\n      return headersData.map(({ label, href }) => {\r\n        return (\r\n          <Button\r\n            {...{\r\n              key: label,\r\n              color: \"inherit\",\r\n              to: href,\r\n              component: RouterLink,\r\n              className: menuButton\r\n            }}\r\n          >\r\n            {label}\r\n          </Button>\r\n        );\r\n      });\r\n    };\r\n\r\n    return (\r\n      <header className={header}>\r\n        <AppBar position=\"sticky\">{mobileView ? displayMobile() : displayDesktop()}</AppBar>\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\nconst API = {\r\n    //randomiseSettlement script\r\n    randomSettlement: function() {\r\n        return axios.get(\"api/random-town\");\r\n    },\r\n    getSettlements: function () {\r\n        return axios.get(\"/api/settlements\");\r\n    },\r\n    // Gets the post with the given id\r\n    getSettlementId: function(id) {\r\n        return axios.get(`/api/posts/${id}`);\r\n    },\r\n\r\n  // Deletes the post with the given id\r\n    deleteSettlement: function(id) {\r\n        return axios.delete(`/api/posts/${id}`);\r\n    },\r\n  // Saves a post to the database\r\n    saveSettlement: function(postSettlement) {\r\n        return axios.post(\"/api/settlements\", postSettlement);\r\n    }\r\n};\r\n\r\nexport default API;\r\n","import React from 'react';\r\n\r\nfunction InhabitantItem (props) {\r\n    const races = props.races;\r\n    console.log(races)\r\n    const removeBlanks = races.filter(race => race !== undefined);\r\n    console.log(removeBlanks)\r\n    const listItems = removeBlanks.map((race) => \r\n        <li key={race.toString()}>\r\n            {race}\r\n        </li>\r\n    )\r\n\r\n    return (\r\n        <ul>{listItems}</ul>\r\n      );\r\n}\r\n\r\nexport default InhabitantItem;\r\n\r\n//Transport this data to new file","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction GenerateTown(props) {\r\n  return (\r\n    <Box m={1}>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={props.onClick} className={`${props[\"data-value\"]}`} {...props} />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default GenerateTown;","import React from 'react';\r\n\r\n//imports from material ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//imported from components file\r\nimport InhabitantItem from './inhabitantItem';\r\nimport GenerateTown from './randomBtn';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n\r\n  },\r\n\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    textAlign: \"center\",\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n\r\n  body: {\r\n      fontSize: 18,\r\n      color: \"white\",\r\n      textAlign: \"center\",\r\n      background: \"green\",\r\n  },\r\n  \r\n  footer: {\r\n      textAlign: \"center\",\r\n      marginTop: 8,\r\n      marginBottom: 10,\r\n  },\r\n});\r\n\r\nfunction RandomCard(props) {\r\n    const name = props.name;\r\n    const government = props.government;\r\n    const type = props.type;\r\n    const size = props.size;\r\n    const description = props.description\r\n    const happening = props.happening;\r\n\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n    <Card variant=\"outlined\" className={classes.root}>\r\n    <Typography className={classes.title} placeholder=\"Town Name Here\">\r\n        {name}\r\n    </Typography>\r\n\r\n    <CardContent className={classes.body}>\r\n      <Typography  component={'span'}>\r\n        Government: {government}\r\n      </Typography>\r\n      <Typography component={'span'}>\r\n          Settlement Size:{type}\r\n      </Typography>\r\n      <Typography component={'span'}>\r\n        Population: {size}\r\n      </Typography>\r\n      <Typography component={'span'}>\r\n          Inhabitants: <InhabitantItem races={props.races} />\r\n      </Typography>\r\n      <Typography component={'span'}>\r\n          Description:{description}\r\n      </Typography>\r\n      <Typography component={'span'}>\r\n        Event: {happening}\r\n      </Typography>\r\n    </CardContent>\r\n     <Typography component={'div'} className={classes.footer}>\r\n      <GenerateTown onClick={props.onClick}>GENERATE TOWN</GenerateTown>\r\n    </Typography>\r\n  </Card>\r\n  );\r\n}\r\n\r\nexport default RandomCard","import React, { Component } from 'react';\r\n\r\nimport API from '../utils/API'\r\n\r\nimport RandomCard from './randomCard'\r\n\r\nclass RandomTown extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '',\r\n      government: '',\r\n      population: '',\r\n      size: '',\r\n      description: '',\r\n      whatsUp: '',\r\n      races: []\r\n    }\r\n  };\r\n  // When the component mounts, load the next settlement to be displayed\r\n  componentDidMount() {\r\n    this.renderSettlement();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.renderSettlement()\r\n  }\r\n\r\n  //convert first letter of string to uppercase\r\n  firstLetterCapital = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1)\r\n  }\r\n  //onClick of button call the API to render data to the page\r\n\r\n\r\n  //loading the API call and equating it the settlement state object.\r\n  renderSettlement = () => {\r\n    API.randomSettlement().then(res => {\r\n      console.log('its working' + JSON.stringify(res.data))\r\n      this.setState ({\r\n        name: res.data.name.toUpperCase(),\r\n        government: this.firstLetterCapital(res.data.government),\r\n        population: this.firstLetterCapital(res.data.population.type), \r\n        size: res.data.population.size,\r\n        \r\n        races:[\r\n          res.data.population.raceOne,\r\n          res.data.population.raceTwo,\r\n          res.data.population.raceThree,\r\n          res.data.population.raceFour,\r\n        ],\r\n        description: res.data.description,\r\n        whatsUp: res.data.whatIsGoingOn,\r\n  \r\n      })\r\n    })\r\n    .catch(err => console.log(err));\r\n  };\r\n  //styles for materialUI\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <RandomCard \r\n          name = {this.state.name}\r\n          government= {this.state.government}\r\n          type = {this.state.population}\r\n          size = {this.state.size}\r\n          races ={this.state.races}\r\n          description = {this.state.description}\r\n          happening = {this.state.whatsUp}\r\n          onClick={this.renderSettlement}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default RandomTown;","import RandomTown from '../components/randomTown';\r\n\r\n//MUI layout\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nfunction GeneratorPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={2}>\r\n\r\n                <Grid item lg={2} xs={12}></Grid>  \r\n                \r\n                    <Grid item lg={8} xs={12}>\r\n                        <RandomTown />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={2}></Grid>\r\n                </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneratorPage;","import React from 'react';\r\n\r\n//imports from material ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import files from Card\r\n\r\n\r\n//Material UI styles for cardDB\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 275,\r\n      margin: '1%',\r\n      \r\n    },\r\n  \r\n    title: {\r\n      fontSize: 20,\r\n      fontWeight: 'bold',\r\n      textAlign: \"center\",\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n    body: {\r\n        fontSize: 18,\r\n        color: \"white\",\r\n        textAlign: \"center\",\r\n        background: \"green\",\r\n    },\r\n  });\r\n\r\n\r\nfunction CardDB (props) {\r\n    const name = props.name;\r\n    const government = props.government;\r\n    const type = props.type;\r\n    const size = props.size;\r\n    const description = props.description\r\n    const happening = props.happening;\r\n    const race = props.race\r\n    //function to call styles\r\n    const classes = useStyles();\r\n\r\n    \r\n    return (\r\n        <Card variant=\"outlined\" className={classes.root}>\r\n            <Typography className={classes.title} component={'section'}>\r\n                {name.toUpperCase()}\r\n            </Typography>\r\n            <CardContent className={classes.body} >\r\n                <Typography component={'section'}>\r\n                    Government: {government}\r\n                </Typography>\r\n                <Typography component={'section'}>\r\n                    Settlement Size: {type}\r\n                </Typography>\r\n                <Typography component={'section'}>\r\n                    Population: {size}\r\n                </Typography>\r\n                <Typography component={'section'}>\r\n                    Majority Race: {race}\r\n                </Typography>\r\n                <Typography component={'section'}>\r\n                    Description:{description}\r\n                </Typography>\r\n                <Typography component={'section'}>\r\n                    Event: {happening}\r\n                </Typography>\r\n          </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardDB;","import React, { Component } from 'react';\r\n\r\nimport API from '../utils/API'\r\n\r\nimport CardDB from './CardDB';\r\n\r\nclass ListAllEntries extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            settlementOne: [],\r\n            settlementTwo: [],\r\n            settlementThree: [],\r\n            settlementFour: [],\r\n            settlementFive: [],\r\n        }\r\n    }  \r\n\r\n    //convert first letter of string to uppercase\r\n    firstLetterCapital = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n      }\r\n  //need to recode to loop through all the settlements and create a card for each one!\r\n    AllEntries = () => {\r\n        API.getSettlements().then(res => {\r\n            console.log('its rendering' + JSON.stringify(res.data))\r\n            this.setState({\r\n                settlementOne: [res.data[0]],\r\n                settlementTwo: [res.data[1]],\r\n                settlementThree: [res.data[2]],\r\n                settlementFour: [res.data[3]],\r\n                settlementFive: [res.data[4]],\r\n            })\r\n        }).catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.AllEntries(); \r\n    }\r\n    \r\n    //rendering the five most recent objects in the database\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.state.settlementOne.map((town) => (\r\n                    \r\n                    <CardDB key={town.id}\r\n                        name={town.name}\r\n                        government={town.government}\r\n                        type={town.type}\r\n                        size={town.size}\r\n                        race={town.population.majorityRace}\r\n                        description={town.description}\r\n                        happening={town.otherInformation}\r\n                    />\r\n                ))}\r\n\r\n                {this.state.settlementTwo.map((town) => (\r\n                    \r\n                    <CardDB key={town.id}\r\n                        name={town.name}\r\n                        government={town.government}\r\n                        type={town.type}\r\n                        size={town.size}\r\n                        race={town.population.majorityRace}\r\n                        description={town.description}\r\n                        happening={town.otherInformation}\r\n                    />\r\n                ))}\r\n\r\n                {this.state.settlementThree.map((town) => (\r\n                    \r\n                    <CardDB key={town.id}\r\n                        name={town.name}\r\n                        government={town.government}\r\n                        type={town.type}\r\n                        size={town.size}\r\n                        race={town.population.majorityRace}\r\n                        description={town.description}\r\n                        happening={town.otherInformation}\r\n                    />\r\n                ))}\r\n\r\n                {this.state.settlementFour.map((town) => (\r\n                    \r\n                    <CardDB key={town.id}\r\n                        name={town.name}\r\n                        government={town.government}\r\n                        type={town.type}\r\n                        size={town.size}\r\n                        race={town.population.majorityRace}\r\n                        description={town.description}\r\n                        happening={town.otherInformation}\r\n                    />\r\n                ))}\r\n\r\n                {this.state.settlementFive.map((town) => (\r\n                    \r\n                    <CardDB key={town.id}\r\n                        name={town.name}\r\n                        government={town.government}\r\n                        type={town.type}\r\n                        size={town.size}\r\n                        race={town.population.majorityRace}\r\n                        description={town.description}\r\n                        happening={town.otherInformation}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ListAllEntries;","import React from \"react\";\r\n//bootstrap layout\r\n\r\nimport ListAllEntries from '../components/ListAllEntries';\r\n//MUI layout\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\n\r\n\r\n//Render Most recent 10 posts from the database here.\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n    <Grid container spacing={2}>\r\n        <Grid item xs={12} md={2}>\r\n          WELCOME TO THE RPG PLANNER\r\n        </Grid>\r\n        <Grid item md={8}>\r\n            <ListAllEntries />\r\n        </Grid>\r\n        <Grid item xs={12} lg={2}></Grid>\r\n    </Grid>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n//wrapper to add padding as submit btn is stuck to bottom of authorValue input field\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction SubmitBtn(props) {\r\n  return (\r\n    <Box m={2}>\r\n    <Button  variant='contained' color=\"secondary\" type=\"submit\" onClick={props.onClick} className={`${props[\"data-value\"]}`} {...props} >\r\n        SUBMIT\r\n    </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SubmitBtn;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport API from '../utils/API';\r\nimport SubmitBtn from './SubmitBtn'\r\n\r\n//import btn component \r\n//Attempted importing a form component but would not work with the value attribute\r\n\r\n\r\n\r\nclass CreateForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      townValue: '',\r\n      governValue:'',\r\n      typeValue: '',\r\n      populationValue: '',\r\n      numberOfRacesValue: '',\r\n      descriptionValue: '',\r\n      raceOneValue: '',\r\n      percentageOneValue: '',\r\n      otherValue: '',\r\n      authorValue: '',\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  //setState\r\n  //type code here to actively update the state based on the value of the different fields. \r\n\r\n  \r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    \r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    \r\n      //Code to check that the population field is a number or integer\r\n        //if this.state.popvalue !== Number convert number or alert to reenter a value\r\n    this.addToDB();\r\n  }\r\n\r\n  \r\n\r\n  //code for an API function to send a post request to the API in the object layout\r\n  addToDB = () => {\r\n    const numberOfRaces = parseInt(this.state.numberOfRacesValue);\r\n    const percentageOne = parseInt(this.state.percentageOneValue);\r\n\r\n    let postSettlement = {\r\n      name: this.state.townValue,\r\n      type: this.state.typeValue,\r\n      size: this.state.populationValue,\r\n      govern: this.state.governValue,\r\n      description: this.state.descriptionValue,\r\n      population: {\r\n        numberOfRaces: numberOfRaces,\r\n        majorityRace: this.state.raceOneValue,\r\n        majorityPercentage: percentageOne\r\n      },\r\n      otherInformation: this.state.otherValue,\r\n      author: this.state.authorValue\r\n    }\r\n\r\n\r\n\r\n    console.log(postSettlement)\r\n    API.saveSettlement(postSettlement).then((res => {\r\n      alert(`Your Settlement ${res.data.name} has been added to the database`);\r\n    })\r\n    ).catch((error => {\r\n      alert(`${error} encountered please try again later`)\r\n    }))\r\n  }\r\n\r\n  //look into dropping percentage in the schema as it is not currently being used\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form autoComplete='on'>\r\n        <Box m={2}>\r\n          <label htmlFor='townValue'>Town Name</label>\r\n          <br></br>\r\n            <input type='text' name='townValue' id='townValue' placeholder=\"Settlement Name\" value={this.state.townValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n          </Box>\r\n\r\n          <Box m={2}>\r\n            <label htmlFor='governValue'>Government</label>\r\n            <br></br>\r\n            <input name='governValue' id='governValue' placeholder=\"How is Your Town Ruled\" value={this.state.governValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n\r\n            <Box m={2}>\r\n            <label htmlFor='typeValue'>Type</label>\r\n            <br></br>\r\n            <input name='typeValue' id='typeValue' placeholder=\"Is it a hamlet, farming-community, village, town, city, monastic order?\" value={this.state.typeValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n          \r\n            <Box m={2}>\r\n            <label>Population</label>\r\n            <br></br>\r\n            <input type=\"number\" name='populationValue' placeholder=\"How many people live in your settlement?\" value={this.state.populationValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n\r\n            <Box m={2}>\r\n            <label htmlFor='descriptionValue'>Description:</label>\r\n            <br></br>\r\n            <textarea cols=\"50\" rows=\"6\" placeholder=\"What does your settlement look like?\" id='descriptionValue' name='descriptionValue' type=\"text\" value={this.state.descriptionValue} onChange={this.handleChange} required/>    \r\n            <br></br>\r\n            </Box>\r\n          \r\n            <Box m={2}>\r\n            <label htmlFor='numberOfRacesValue'>How Many Races Live in Your Settlement?</label>\r\n            <br></br>\r\n            <input min='1' max='5' id='numberOfRacesValue' name='numberOfRacesValue' type=\"number\" value={this.state.numberOfRacesValue} onChange={this.handleChange} required/>\r\n            <br></br>  \r\n            </Box>   \r\n\r\n            <Box m={2}>\r\n            <label htmlFor='raceOneValue'>Dominant Race name which lives in the settlement?</label>\r\n            <br></br>\r\n            <input id='raceOneValue' name='raceOneValue' placeholder=\"Race Name\" value={this.state.raceOneValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n            <Box m={2}>\r\n            <label htmlFor='percentageOneValue'>Percentage:</label>\r\n            <br></br>\r\n            <input name='percentageOneValue' type=\"number\" min='1' max='100' placeholder=\"Percentage of the majority race which lives in this town.\" value={this.state.percentageOneValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n            \r\n            <Box m={2}>\r\n            <label htmlFor='otherValue'>Other Information:</label>\r\n            <br></br>\r\n            <textarea type=\"text\" id='otherValue' name='otherValue' cols=\"50\" rows=\"6\" placeholder='Key NPCS, events, Other Races Which live here, what is that shifty blind man up to?' value={this.state.otherValue} onChange={this.handleChange} required/>\r\n            <br></br>\r\n            </Box>\r\n\r\n            <label htmlFor='authorValue'>By</label>\r\n            <br></br>\r\n            <input id='authorValue' name='authorValue' placeholder=\"Author Name Here\" value={this.state.authorValue} onChange={this.handleChange} required />\r\n            <br></br>\r\n\r\n            <SubmitBtn onClick={this.handleSubmit}/>\r\n        </form>\r\n    </div>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default CreateForm;","import React from \"react\";\r\n//Material UI interface\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CreateForm from '../components/CreateFormBasic';\r\n//<Paper variant=\"outlined\" square />\r\n//Render Most recent 10 posts from the database here.\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  sidePaper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n\r\n  paperForm: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: 'white',\r\n    background: 'blue',\r\n    margin: '1%',\r\n  },\r\n}));\r\n\r\nconst SubmitIdea = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}></Grid>\r\n        <Grid item md={2} xs={12}>\r\n          <Paper className ={classes.sidePaper}>Add Your Own Idea to the system for others to explore and view!</Paper>\r\n        </Grid>\r\n        <Grid item md={8} xs={12}>\r\n          <Paper className ={classes.paperForm}><CreateForm /></Paper>\r\n        </Grid>\r\n        <Grid item md={2}></Grid>\r\n      </Grid>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SubmitIdea;","import React from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport Header from './components/Header';\n\nimport GeneratorPage from './pages/GeneratedTown';\nimport Home from './pages/Home';\nimport SubmitIdea from './pages/SubmitIdea';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n        <Route exact path =\"/\" component={Home} />\n        <Route exact path =\"/home\" component={Home} />\n        <Route exact path=\"/random\" component={GeneratorPage} />\n        <Route exact path=\"/custom\" component={SubmitIdea} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}